9-1

BEGIN; 
--これより下がトランザクション
-- 処理1
INSERT INTO 家計簿アーカイブ
SELECT *
  FROM 家計簿
 WHERE 日付 <= '2018-01-31';
-- 処理2
DELETE FROM 家計簿
 WHERE 日付 <= '2018-01-31';

--これより上がトランザクション
COMMIT;


-- トランザクションは、不可分として扱われる。(原子性)


同時処理の副作用
--1. ダーティーリード
まだコミットされていない未確定の変更を、他の人が読めてしまう副作用。

--2. 反復不能読み取り
あるテーブルに対して、SELECT文を実行した後に、
他の人がUPDATE文でデータを書き換えてしまうと、データの生合成が崩れ、再度SELECTした際に検索結果が異なる副作用。

--3. ファントムリード
反復読み取りと似ていて、SELECT文の間にINSERTしてしまうと、行数が増えてしまい、検索結果が異なってしまう副作用。


⇨これらをトランザクションで解決できる。(分離性)

多くのDBMSでは、トランザクション分離レベルを指定できる。
大抵は、READ COMMITTEDで動作している。

9-2 --トランザクション分離レベルの設定

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE

-- 安全だが、処理速度は落ちてしまう。

9-3 --明示的ロック　行ロックの取得

 BEGIN;  --以下からトランザクション
SELECT *
  FROM 家計簿
 WHERE 日付 >= '2018-02-01'
   FOR UPDATE;　-- 2月以降のデータが明示的ロック
--- 集計処理1
SELECT ~ ;
--- 集計処理2
SELECT ~ ;
--- 集計処理3
SELECT ~ ;
COMMIT;  --ロックが解除される

9-4 --表ロックの取得

 BEGIN;  --以下からトランザクション
  LOCK TABLE 家計簿 IN EXCLUSIVE MODE ; -- 表を明示的ロック
--- 集計処理1
SELECT ~ ;
--- 集計処理2
SELECT ~ ;
--- 集計処理3
SELECT ~ ;
COMMIT;  --ロックが解除される

-- デットロック　同時多数のトランザクションが実行されると、トランザクション処理が永久に止まってしまうこと。

練習問題
9-1
A:トランザクション
B:COMMIT
C:原子性
D:分離性
E:トランザクション分離レベル

9-2
1: 
受注テーブルに在庫を追加してた後に処理が中断されてしまうと、在庫が減らなくなってしまう。
受注テーブルに在庫を追加してた後に処理が中断されても、出荷管理プログラムで出荷されてしまう。

2:
BEGIN;
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
~
COMMIUT;

を追加する。

9-3
ア、エ、カ、ク